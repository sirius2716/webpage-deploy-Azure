trigger:
- main

stages:
  - stage: 'Build'
    displayName: 'Build'
    jobs:
      - job: 'Package'
        displayName: 'Package the webpage'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(Build.Repository.LocalPath)/www'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/MyWeb-$(Build.BuildId).zip'
              replaceExistingArchive: true
          - publish: '$(Build.ArtifactStagingDirectory)/MyWeb-$(Build.BuildId).zip'
            artifact: 'www'
  - stage: 'Deploy'
    displayName: 'Deploy'
    dependsOn: 'Build'
    jobs:
      - job: 'Provison'
        displayName: 'Provion Azure VM with Terraform'
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          - group: 'Terraform'
        steps:
          - script: |
              set -e

              cd terraform
              terraform init -input=false -backend-config="backend.tfvars"
              terraform apply -input=false -auto-approve
              PublicIp=$(terraform output -raw publicip)

              if [ -z $PublicIp ]; then
                sleep 30
                terraform refresh
                PublicIp=$(terraform output -raw publicip)
              fi

              echo "##vso[task.setvariable variable=PublicIp;isOutput=true]$PublicIp"
            name: 'RunTerraform'
            displayName: 'Run Terraform'
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
      - deployment: 'Deploy'
        displayName: 'Depoy files to server'
        dependsOn: 'Provison'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: 'current'
                  artifact: 'www'
                - task: CopyFilesOverSSH@0
                  inputs:
                    sshEndpoint: 'MyWeb-SSH'
                    sourceFolder: '$(Pipeline.Workspace)/www'
                    contents: 'MyWeb-$(Build.BuildId).zip'
                    targetFolder: '/tmp/'
                    overwrite: true
                - task: SSH@0
                  inputs:
                    sshEndpoint: 'MyWeb-SSH'
                    runOptions: 'inline'
                    inline: |
                      sudo systemctl stop nginx
                      sudo rm -rf /var/www/html/*
                      echo "\$ZIP_FILE=$ZIP_FILE"
                      sudo echo "sudo \$ZIP_FILE=$ZIP_FILE"
                      sudo echo "unzip -o $ZIP_FILE -d /var/www/html/"
                      sudo unzip -o $ZIP_FILE -d /var/www/html/
                      sudo systemctl start nginx
                    interpreterCommand: '/bin/bash'
                  env:
                    ZIP_FILE: '/tmp/MyWeb-$(Build.BuildId).zip'
                    
                    


                


